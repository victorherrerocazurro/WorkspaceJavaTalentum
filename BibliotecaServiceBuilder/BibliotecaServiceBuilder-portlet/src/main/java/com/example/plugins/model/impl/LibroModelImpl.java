package com.example.plugins.model.impl;

import com.example.plugins.model.Libro;
import com.example.plugins.model.LibroModel;
import com.example.plugins.model.LibroSoap;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Libro service. Represents a row in the &quot;Libros&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.plugins.model.LibroModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LibroImpl
 * @see com.example.plugins.model.Libro
 * @see com.example.plugins.model.LibroModel
 * @generated
 */
@JSON(strict = true)
public class LibroModelImpl extends BaseModelImpl<Libro> implements LibroModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a libro model instance should use the {@link com.example.plugins.model.Libro} interface instead.
     */
    public static final String TABLE_NAME = "Libros";
    public static final Object[][] TABLE_COLUMNS = {
            { "isbn", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "autor", Types.VARCHAR },
            { "titulo", Types.VARCHAR },
            { "numeroPaginas", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Libros (isbn LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,autor VARCHAR(75) null,titulo VARCHAR(75) null,numeroPaginas INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table Libros";
    public static final String ORDER_BY_JPQL = " ORDER BY libro.titulo ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Libros.titulo ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.plugins.model.Libro"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.plugins.model.Libro"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.example.plugins.model.Libro"),
            true);
    public static long TITULO_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.plugins.model.Libro"));
    private static ClassLoader _classLoader = Libro.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Libro.class };
    private long _isbn;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _autor;
    private String _titulo;
    private String _originalTitulo;
    private int _numeroPaginas;
    private long _columnBitmask;
    private Libro _escapedModel;

    public LibroModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Libro toModel(LibroSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Libro model = new LibroImpl();

        model.setIsbn(soapModel.getIsbn());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setAutor(soapModel.getAutor());
        model.setTitulo(soapModel.getTitulo());
        model.setNumeroPaginas(soapModel.getNumeroPaginas());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Libro> toModels(LibroSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Libro> models = new ArrayList<Libro>(soapModels.length);

        for (LibroSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _isbn;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIsbn(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _isbn;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Libro.class;
    }

    @Override
    public String getModelClassName() {
        return Libro.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("isbn", getIsbn());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("autor", getAutor());
        attributes.put("titulo", getTitulo());
        attributes.put("numeroPaginas", getNumeroPaginas());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long isbn = (Long) attributes.get("isbn");

        if (isbn != null) {
            setIsbn(isbn);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String autor = (String) attributes.get("autor");

        if (autor != null) {
            setAutor(autor);
        }

        String titulo = (String) attributes.get("titulo");

        if (titulo != null) {
            setTitulo(titulo);
        }

        Integer numeroPaginas = (Integer) attributes.get("numeroPaginas");

        if (numeroPaginas != null) {
            setNumeroPaginas(numeroPaginas);
        }
    }

    @JSON
    @Override
    public long getIsbn() {
        return _isbn;
    }

    @Override
    public void setIsbn(long isbn) {
        _isbn = isbn;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getAutor() {
        if (_autor == null) {
            return StringPool.BLANK;
        } else {
            return _autor;
        }
    }

    @Override
    public void setAutor(String autor) {
        _autor = autor;
    }

    @JSON
    @Override
    public String getTitulo() {
        if (_titulo == null) {
            return StringPool.BLANK;
        } else {
            return _titulo;
        }
    }

    @Override
    public void setTitulo(String titulo) {
        _columnBitmask = -1L;

        if (_originalTitulo == null) {
            _originalTitulo = _titulo;
        }

        _titulo = titulo;
    }

    public String getOriginalTitulo() {
        return GetterUtil.getString(_originalTitulo);
    }

    @JSON
    @Override
    public int getNumeroPaginas() {
        return _numeroPaginas;
    }

    @Override
    public void setNumeroPaginas(int numeroPaginas) {
        _numeroPaginas = numeroPaginas;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Libro.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Libro toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Libro) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LibroImpl libroImpl = new LibroImpl();

        libroImpl.setIsbn(getIsbn());
        libroImpl.setGroupId(getGroupId());
        libroImpl.setCompanyId(getCompanyId());
        libroImpl.setUserId(getUserId());
        libroImpl.setUserName(getUserName());
        libroImpl.setCreateDate(getCreateDate());
        libroImpl.setModifiedDate(getModifiedDate());
        libroImpl.setAutor(getAutor());
        libroImpl.setTitulo(getTitulo());
        libroImpl.setNumeroPaginas(getNumeroPaginas());

        libroImpl.resetOriginalValues();

        return libroImpl;
    }

    @Override
    public int compareTo(Libro libro) {
        int value = 0;

        value = getTitulo().compareTo(libro.getTitulo());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Libro)) {
            return false;
        }

        Libro libro = (Libro) obj;

        long primaryKey = libro.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LibroModelImpl libroModelImpl = this;

        libroModelImpl._originalTitulo = libroModelImpl._titulo;

        libroModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Libro> toCacheModel() {
        LibroCacheModel libroCacheModel = new LibroCacheModel();

        libroCacheModel.isbn = getIsbn();

        libroCacheModel.groupId = getGroupId();

        libroCacheModel.companyId = getCompanyId();

        libroCacheModel.userId = getUserId();

        libroCacheModel.userName = getUserName();

        String userName = libroCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            libroCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            libroCacheModel.createDate = createDate.getTime();
        } else {
            libroCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            libroCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            libroCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        libroCacheModel.autor = getAutor();

        String autor = libroCacheModel.autor;

        if ((autor != null) && (autor.length() == 0)) {
            libroCacheModel.autor = null;
        }

        libroCacheModel.titulo = getTitulo();

        String titulo = libroCacheModel.titulo;

        if ((titulo != null) && (titulo.length() == 0)) {
            libroCacheModel.titulo = null;
        }

        libroCacheModel.numeroPaginas = getNumeroPaginas();

        return libroCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{isbn=");
        sb.append(getIsbn());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", autor=");
        sb.append(getAutor());
        sb.append(", titulo=");
        sb.append(getTitulo());
        sb.append(", numeroPaginas=");
        sb.append(getNumeroPaginas());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.example.plugins.model.Libro");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>isbn</column-name><column-value><![CDATA[");
        sb.append(getIsbn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>autor</column-name><column-value><![CDATA[");
        sb.append(getAutor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>titulo</column-name><column-value><![CDATA[");
        sb.append(getTitulo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numeroPaginas</column-name><column-value><![CDATA[");
        sb.append(getNumeroPaginas());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
